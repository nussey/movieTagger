cmake_minimum_required (VERSION 2.6)

project (AtomicParsley)

INCLUDE(CheckIncludeFiles)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckTypeSize)

# The version number
set (VERSION 0.9.6)
set (PACKAGE "atomicparsley")
set (PACKAGE_BUGREPORT "http://bitbucket.org/wez/atomicparsley/issues/new/")
set (PACKAGE_NAME "atomicparsley")

SET(CMAKE_BUILD_TYPE "Release")

IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set (DARWIN_PLATFORM 1)
    INCLUDE_DIRECTORIES ( /Developer/Headers/FlatCarbon )
    FIND_LIBRARY(COCOA_LIBRARY Cocoa)
    FIND_LIBRARY(FOUNDATION_LIBRARY Foundation )
    FIND_LIBRARY(IOKIT_LIBRARY IOKit )
    MARK_AS_ADVANCED (COCOA_LIBRARY
                      FOUNDATION_LIBRARY
                      IOKIT_LIBRARY)
    SET(EXTRA_LIBS ${COCOA_LIBRARY} ${FOUNDATION_LIBRARY} ${IOKIT_LIBRARY})
    FIND_PATH(COCOA_INCLUDE_DIR Cocoa/Cocoa.h)
ENDIF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

# Check includes
CHECK_INCLUDE_FILES(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES(windows.h HAVE_WINDOWS_H)
CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILES(sys/ioctl.h HAVE_SYS_IOCTL_H)
CHECK_INCLUDE_FILES(linux/cdrom.h HAVE_LINUX_CDROM_H)
CHECK_INCLUDE_FILES(sys/mount.h HAVE_SYS_MOUNT_H)
CHECK_INCLUDE_FILES(sys/param.h HAVE_SYS_PARAM_H)
CHECK_INCLUDE_FILES(wchar.h HAVE_WCHAR_H)
CHECK_INCLUDE_FILES(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES(io.h HAVE_IO_H)
CHECK_INCLUDE_FILES(signal.h HAVE_SIGNAL_H)
CHECK_INCLUDE_FILES(getopt.h HAVE_GETOPT_H)

# Check Functions
CHECK_FUNCTION_EXISTS(fseeko HAVE_FSEEKO)
CHECK_FUNCTION_EXISTS(fsetpos HAVE_FSETPOS)
CHECK_FUNCTION_EXISTS(lroundf HAVE_LROUNDF)
CHECK_FUNCTION_EXISTS(malloc HAVE_MALLOC)
CHECK_FUNCTION_EXISTS(memcmp HAVE_MEMCMP)
CHECK_FUNCTION_EXISTS(memset HAVE_MEMSET)
CHECK_FUNCTION_EXISTS(remove HAVE_REMOVE)
CHECK_FUNCTION_EXISTS(rename HAVE_RENAME)
CHECK_FUNCTION_EXISTS(scanf HAVE_SCANF)
CHECK_FUNCTION_EXISTS(strdup HAVE_STRDUP)
CHECK_FUNCTION_EXISTS(strerror HAVE_ERROR)
CHECK_FUNCTION_EXISTS(strftime HAVE_STRFTIME)
CHECK_FUNCTION_EXISTS(strncasecmp HAVE_STRNCASECMP)
CHECK_FUNCTION_EXISTS(strncmp HAVE_STRNCMP)
CHECK_FUNCTION_EXISTS(strrchr HAVE_STRRCHR)
CHECK_FUNCTION_EXISTS(strsep HAVE_STRSEP)
CHECK_FUNCTION_EXISTS(strstr HAVE_STRSTR)
CHECK_FUNCTION_EXISTS(strtol HAVE_STRTOL)
CHECK_FUNCTION_EXISTS(wmemset HAVE_WMEMSET)
CHECK_FUNCTION_EXISTS(snprintf HAVE_SNPRINTF)
CHECK_FUNCTION_EXISTS(_snprintf HAVE__SNPRINTF)
CHECK_FUNCTION_EXISTS(strtoumax HAVE_STRTOUMAX)

# Check types
CHECK_TYPE_SIZE("long long int"            LONG_LONG_INT)
CHECK_TYPE_SIZE("unsigned long long"       UNSIGNED_LONG_LONG)
CHECK_TYPE_SIZE("unsigned long long int"   UNSIGNED_LONG_LONG_INT)

#
CHECK_TYPE_SIZE(dev_t       DEV_T)
IF(NOT HAVE_DEV_T)
  IF(MSVC)
    SET(dev_t "unsigned int")
  ENDIF(MSVC)
ENDIF(NOT HAVE_DEV_T)
#
CHECK_TYPE_SIZE(gid_t       GID_T)
IF(NOT HAVE_GID_T)
  IF(WIN32)
    SET(gid_t "unsigned int")
  ELSEIF(WIN32)
    SET(gid_t int)
  ENDIF(WIN32)
ENDIF(NOT HAVE_GID_T)
#
CHECK_TYPE_SIZE(id_t        ID_T)
IF(NOT HAVE_ID_T)
  SET(id_t int)
ENDIF(NOT HAVE_ID_T)
#
CHECK_TYPE_SIZE(int64_t     INT64_T)
IF(NOT HAVE_INT64_T)
  IF(MSVC)
    SET(int64_t __int64)
  ENDIF(MSVC)
ENDIF(NOT HAVE_INT64_T)
#
CHECK_TYPE_SIZE(intmax_t    INTMAX_T)
IF(NOT HAVE_INTMAX_T)
  IF(MSVC)
    SET(intmax_t "long long")
  ENDIF(MSVC)
ENDIF(NOT HAVE_INTMAX_T)
#
CHECK_TYPE_SIZE(mode_t      MODE_T)
IF(NOT HAVE_MODE_T)
  IF(MSVC)
    SET(mode_t "unsigned short")
  ELSE(MSVC)
    SET(mode_t "int")
  ENDIF(MSVC)
ENDIF(NOT HAVE_MODE_T)
#
CHECK_TYPE_SIZE(off_t       OFF_T)
IF(NOT HAVE_OFF_T)
  SET(off_t "long long")
ENDIF(NOT HAVE_OFF_T)
#
CHECK_TYPE_SIZE(pid_t       PID_T)
IF(NOT HAVE_PID_T)
  IF(MSVC)
    SET(pid_t "unsigned short")
  ENDIF(MSVC)
ENDIF(NOT HAVE_PID_T)
#
CHECK_TYPE_SIZE(size_t      SIZE_T)
IF(NOT HAVE_SIZE_T)
  SET(size_t "unsigned int")
ENDIF(NOT HAVE_SIZE_T)
#
CHECK_TYPE_SIZE(ssize_t     SSIZE_T)
IF(NOT HAVE_SSIZE_T)
  IF(MSVC)
    IF(CMAKE_CL_64)
      SET(ssize_t "__int64")
    ELSE(CMAKE_CL_64)
      SET(ssize_t   "signed long")
    ENDIF(CMAKE_CL_64)
  ELSE(MSVC)
      SET(ssize_t   "int")
  ENDIF(MSVC)
ENDIF(NOT HAVE_SSIZE_T)
#
CHECK_TYPE_SIZE(uid_t       UID_T)
IF(NOT HAVE_UID_T)
  IF(WIN32)
    SET(uid_t "unsigned int")
  ELSEIF(WIN32)
    SET(uid_t int)
  ENDIF(WIN32)
ENDIF(NOT HAVE_UID_T)
#
CHECK_TYPE_SIZE(uint16_t    UINT16_T)
IF(NOT HAVE_UINT16_T)
  IF(MSVC)
    SET(uint16_t "unsigned short")
  ENDIF(MSVC)
ENDIF(NOT HAVE_UINT16_T)
#
CHECK_TYPE_SIZE(uint32_t    UINT32_T)
IF(NOT HAVE_UINT32_T)
  IF(MSVC)
    SET(uint32_t "unsigned int")
  ENDIF(MSVC)
ENDIF(NOT HAVE_UINT32_T)
#
CHECK_TYPE_SIZE(uint64_t    UINT64_T)
IF(NOT HAVE_UINT64_T)
  IF(MSVC)
    SET(uint64_t "unsigned __int64")
  ENDIF(MSVC)
ENDIF(NOT HAVE_UINT64_T)
#
CHECK_TYPE_SIZE(uintmax_t   UINTMAX_T)
IF(NOT HAVE_UINTMAX_T)
  IF(MSVC)
    SET(uintmax_t "unsigned long long")
  ENDIF(MSVC)
ENDIF(NOT HAVE_UINTMAX_T)
#
CHECK_TYPE_SIZE(wchar_t     SIZEOF_WCHAR_T)
IF(HAVE_SIZEOF_WCHAR_T)
  SET(HAVE_WCHAR_T 1)
ENDIF(HAVE_SIZEOF_WCHAR_T)

# Generate config file
configure_file (
  "${PROJECT_SOURCE_DIR}/src/config.h.in"
    "${PROJECT_BINARY_DIR}/src/config.h"
    )
include_directories("${PROJECT_BINARY_DIR}/src")

set( AtomicParsleySources src/sha1.cpp src/extracts.cpp src/id3v2.cpp src/compress.cpp src/metalist.cpp src/arrays.cpp src/util.cpp src/main.cpp src/CDtoc.cpp src/uuid.cpp src/parsley.cpp src/iconv.cpp src/outputxml.cpp)
IF (MSVC)
    SET( AtomicParsleySources ${AtomicParsleySources} src/extras/getopt.c src/extras/getopt1.c)
ENDIF (MSVC)

IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    SET( AtomicParsleySources ${AtomicParsleySources} src/nsfile.mm src/nsimage.mm)
ENDIF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

add_executable(AtomicParsley ${AtomicParsleySources} )

TARGET_LINK_LIBRARIES(AtomicParsley ${EXTRA_LIBS} )
if (CMAKE_COMPILER_IS_GNUCXX)
    message("Using GNU G++")
    find_library(M_LIB m)
    target_link_libraries(AtomicParsley ${M_LIB})

    set ( LinkerFlags )
    set ( CompilerFlags )

    IF ( DEFINED Static )
        IF ( Static STREQUAL "true" )
            message ("Building static")
            set_target_properties(AtomicParsley PROPERTIES LINK_SEARCH_START_STATIC 1)
            set ( LinkerFlags "${LinkerFlags} -static" )
        ENDIF (  Static STREQUAL "true" )
    ENDIF ( DEFINED Static )

    IF ( DEFINED ConfigType )
        if ( ConfigType STREQUAL "x86_32" )
            message ("Cross Compiling for 32Bit system")
            set ( LinkerFlags "${LinkerFlags} -m32" )
            set ( CompilerFlags "${CompilerFlags} -m32" )
        endif ( ConfigType STREQUAL "x86_32" )
    ENDIF ( DEFINED ConfigType )

    IF ( DEFINED CompilerFlags )
        set(CMAKE_CXX_FLAGS "${CompilerFlags}")
    ENDIF ( DEFINED CompilerFlags )
    IF ( DEFINED LinkerFlags )
        set_target_properties(AtomicParsley PROPERTIES LINK_FLAGS ${LinkerFlags})
    ENDIF ( DEFINED LinkerFlags )
endif (CMAKE_COMPILER_IS_GNUCXX)

install (TARGETS AtomicParsley DESTINATION bin)
